long long mod = 1e9 + 7;
    
    int threeSumMulti(vector<int>& arr, int target) {
        
        int n = arr.size();
        
        unordered_map<int, int> mp;
        
        int count = 0;
        
        for(int i = 0; i < n; i++)
        {
            for(int j = i + 1; j < n; j++)
            {
                int need = target - arr[i] - arr[j];
                
                count += mp[need];
            }
            
            count %= mod;
            
            mp[arr[i]]++;
        }
        
        return count % mod;
    }
Approach 2 : Using Sorting

Time Complexity : O(N * N)

Space Complexity : O(1)

    long long mod = 1e9 + 7;
    
    int threeSumMulti(vector<int>& arr, int target) {
        
        int n = arr.size();
        
        sort(arr.begin(), arr.end());
        
        int count = 0;
        
        for(int i = 0; i <= n - 3; i++)
        {
            int low = i + 1;
            
            int high = n - 1;
            
            int need = target - arr[i];
            
            while(low < high)
            {
                if(arr[low] + arr[high] < need)
                {
                    low++;
                }
                
                else if(arr[low] + arr[high] > need)
                {
                    high--;
                }
                
                else
                {
                    if(arr[low] != arr[high])
                    {
                        int left_count = 1;
                        
                        int right_count = 1;
                        
                        while(low < high && arr[low] == arr[low + 1])
                        {
                            left_count++;
                            
                            low++;
                        }
                        
                        while(high > low && arr[high] == arr[high - 1])
                        {
                            right_count++;
                            
                            high--; 
                        }
                        
                        count = (count % mod + left_count % mod * right_count % mod) % mod;
                        
                        low++;
                        
                        high--;
                    }
                    
                    else
                    {
                        int total_duplicate = (high - low + 1);
                        
                        count = (count % mod + (total_duplicate % mod * (total_duplicate - 1) % mod) / 2) % mod;
                        
                        break;
                    }
                }
            }
        }
        
        return count;
    }
    
    c3:
    
    class Solution {
public:
    int threeSumMulti(vector<int>& arr, int target) {
        unordered_map<int, int> m;
        int res = 0, mod = 1e9 + 7;
        for (int i = 0; i < arr.size(); i++) {
            res = (res + m[target - arr[i]]) % mod;
            for (int j = 0; j < i; j++) {
                m[arr[i] + arr[j]]++;
            }
        }
        return res;
    }
};
