C++ Easy Two Pointer Solution
Tejas_01
Sep LeetCoding Challenge
40
Sep 12, 2022
We have asked to calculate Maximum possible Score with given conditions.

We simply can sort the vector so that we could gain score we least possible tokens[i]

If we fall short of Power and still have potential tokens[i] to increase the score we can spend largest possible tokens[i] to gain Maximum Power. So that we can explore those potential tokens[i] to increase our score.

For keeping check on tokens used for gaining score(smaller tokens) we used "gain" pointer Pointing at smallest element present.

For keeping track of tokens we are spending(larger tokens) we used "spend" pointer Pointing at largest element present.

class Solution {
public:
int bagOfTokensScore(vector& tokens, int power) {

	sort(tokens.begin(),tokens.end());   //Sorted in Ascending order 
    int t_size = size(tokens); 
    int gain = 0;               //Pointer on First element 
    int score = 0, max_score = 0;
    int spend = t_size-1;       //Pointer on Last element
    
    while(gain<=spend){
        
        if(power >= tokens[gain]){  //If we have power > (current) Token
            score+=1;
            max_score = std::max(max_score,score); 
            power-=tokens[gain];
            gain++;
        }
        
        else if(score >= 1){        //When current Token > Power and if we have score > 0
            power += tokens[spend];
            score -= 1;
            spend--;
        }
        else
            break;                  //If none condition mentioned above satisfies break the loop
    }
    
    return max_score;
    
}
};
