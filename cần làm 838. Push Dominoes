class Solution {
public:
    string pushDominoes(string dominoes) {
        #define SET(ch, arr) \
                    if (dominoes[i] == ch) { count = 1; prev = ch; } \
                    else if (dominoes[i] != '.') prev = dominoes[i]; \
                    if (prev == ch && dominoes[i] == '.') arr[i] = count++;
        
        string res = "";
        char prev;
        int n = dominoes.size(), count = 1;
        
        vector<int> left(n, 0), right(n, 0);
        for (int i = 0; i < n; i++) {
            SET('R', right);
        }
        
        prev = '.';
        for (int i = n-1; i >= 0; i--) {
            SET('L', left);
        }
        
        for (int i = 0; i < n; i++) {
            if (!left[i] && !right[i]) res += dominoes[i];
            else if (!left[i]) res += 'R';
            else if (!right[i]) res += 'L';
            else if (left[i] == right[i]) res += '.';
            else if (left[i] < right[i]) res += 'L';
            else res += 'R';
        }
        
        return res;
    }
};

c2:

C++ | Two Pointer | Diagram | Related Problems
kiranpalsingh1806
Annual Badge 2022
2857
Sep 27, 2022
Approach

If we encounter . in string, we move forward to next index.
If we encounter L in string, we see if index of right is -1, we make all the left index L until we see any other L.
If we encounter L in string and there is some previous R index, then we simultaneously change string from left and right side till two pointers reach each other. After that right moves back to -1.
If we encounter R in string, we see if the index of R is not -1, we make all the indices upto that index R.
Diagram Explanation

image

image

Explanation of steps
In step 8, we encountered L, so first thing we check if index of previous right is not -1. Here right is 3, so we started making R from index 4 onwards and simultaneously started making L from index 7 in backward direction. We will stop if left and right pointer arrives at same point. After than, we send right to -1 until we find another R in string.

C++ Code

string pushDominoes(string s) {
    int N = s.size(), right = -1;
    for (int i = 0; i < N; ++i) {
        if (s[i] == 'L') {
            if (right == -1) { 
                // Step 2
                for (int j = i - 1; j >= 0 && s[j] == '.'; --j) {
                  s[j] = 'L';  
                } 
            } else {
                // Step 8
                for (int j = right + 1, k = i - 1; j < k; ++j, --k) {
                    s[j] = 'R';
                    s[k] = 'L';
                } 
                right = -1;
            }
        } else if (s[i] == 'R') {
            if (right != -1) {
                for (int j = right + 1; j < i; ++j) s[j] = 'R';
            }
            right = i;
        }
    }
    if (right != -1) {
        for (int j = right + 1; j < N; ++j) s[j] = 'R';
    }
    return s;
}
Related Problems - Two Pointer
1. Two Sum
2. Container With Most Water
3. 3Sum
4. Minimum Window Substring
5. Remove Duplicates from Sorted List
6. Reorder List
7. Maximum Product Subarray
8. Palindrome Linked List
9. Subarray Product Less Than K
10. Backspace String Compare
