class Solution {
public:
    string largestMerge(string word1, string word2) {
        //idea is to check & compare characters at each index
        //1. if s1[i]>s2[j] -> i++ we will merger s1[i]
        //2. if s1[i]<s2[j] -> j++ we will take s2[j]
        //3. if s1[i]==s2[i] -> we will compare s1[i] & s2[j] for all n-i char
        int i=0,j=0,l1=word1.length(),l2=word2.length();
        string merge="";
        while(i<l1 && j<l2){
            if(word1.compare(i,l1-i,word2,j,l2-j)>0){
                merge+=word1[i++];
            }
            else{
                merge+=word2[j++];
            }            
        }
        if(i<l1)merge+=word1.substr(i);
        else if(j<l2)merge+=word2.substr(j);
        return merge;
        
    }
};

c2:
class Solution {
public:
  string largestMerge(string w1, string w2) {
    string res;
    int i = 0, j = 0;
    while(i < w1.size() && j < w2.size()) {
        if (w1.compare(i, w1.size() - i, w2, j, w2.size() - j) > 0)
            res += w1[i++];
        else
            res += w2[j++];
    }
    return res + w1.substr(i) + w2.substr(j);
}
};

c3:

Greedy Pointers | C++
TusharBhart
Annual Badge 2022
786
Jan 04, 2023
class Solution {
public:
    string largestMerge(string word1, string word2) {
        int i = 0, j = 0, n = word1.size(), m = word2.size();
        string ans;

        while(i < n && j < m) {
            if(word1.substr(i) > word2.substr(j)) ans += word1[i], i++;
            else ans += word2[j], j++;
        }
        while(i < n) ans += word1[i], i++;
        while(j < m) ans += word2[j], j++;
        
        return ans;
    }
};
