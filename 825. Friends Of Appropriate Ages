class Solution {
public:
    int numFriendRequests(vector<int>& ages) {
        int* temp = new int[122]{0};
        for (int i = 0;i <  ages.size();i++)
        {
            temp[ages[i]]++;
        }
        
        for (int i = 1;i < 122;i++)
        {
            temp[i] = temp[i] + temp[i - 1];
        }
        
        int res = 0;
        for (int i = 0;i < ages.size(); i++)
        {
            if (ages[i] > 14)
                res += (temp[ages[i]] - temp[(int)(0.5*ages[i]) + 7]) - 1;
        }
        
        return res;
    }
};
c2:

Since the age range is limited to [1..120], we can count number of people of each age and store in the array. Then we can use that array to count friend requests:

People younger than 15 cannot make requests due to the first rule.
From the age of 15, people can make requests to the same age: a[i] * (a[i] - 1) requests.
People can make requests to younger people older than 0.5 * i + 7: a[j] * a[i] requests.
The third rule is redundant as the condition is already covered by the second rule.
The complexity is O(n) as we need to count ages in the input array. Counting requests is O(1) as it always takes 2862 operations precisely.

int numFriendRequests(vector<int>& ages) {
  int a[121] = {}, res = 0;
  for (auto age : ages) ++a[age];
  for (auto i = 15; i <= 120; ++i)
    for (int j = 0.5 * i + 8; j <= i; ++j) res += a[j] * (a[i] - (i == j));
  return res;
}
We can optimize the counting by using a sliding sum of friend requests. Note that the sum starts at the minimum age (0.5 * i + 7), per the first rule.

The complexity of optimized solution is O(n + m) vs. O(n + m * m), where m is the age range. In our case, we need only 159 operations for [1..120] range. I did not see much of a difference in the OJ runtime, though, probably because of the tight constraint. The second solution will shine if we need, for example, use days instead of years to compare ages.

int numFriendRequests(vector<int>& ages) {
  int a[121] = {}, res = 0;
  for (auto age : ages) ++a[age];
  for (auto i = 15, minAge = 15, sSum = 0; i <= 120; sSum += a[i], res += a[i++] * (sSum - 1))
    while (minAge <= 0.5 * i + 7) sSum -= a[minAge++];
  return res;
}
