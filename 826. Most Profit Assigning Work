C++ Easy to UnderStand Sorting solution || ⭐⭐⭐
Shailesh0302
100 Days Badge 2022
105
Apr 03, 2023
Intuition
Sort

Approach
make vector{profit,difficulty} and sort it
sort worker array
keep index at last of sorted vector{profit,difficulty}
start from last of sorted worker array and check for worker[i]>=difficulty of sorted array{profit,difficulty}
4,1. If not greater, do index-- till greater found and add that profit to final ans because profits beyond that cannot be acquired by other workers futher in iteration
4,2. Else add vector{profit,difficulty}[index] to finalAns
Return final Answer
Complexity
length of difficulty array=n
length of worker array=m

Time complexity:O(nlogn+mlogm+n+m)
Space complexity:O(n)
Code
class Solution {
public:
    int maxProfitAssignment(vector<int>& difficulty, vector<int>& profit, vector<int>& worker){
        int n=difficulty.size();
        vector<pair<int,int>> nums;

        for(int i=0;i<n;i++){
            nums.push_back({profit[i],difficulty[i]});
        }
        sort(nums.begin(),nums.end());
        int index=n-1;
        int ans=0;
        sort(worker.begin(),worker.end());
        
        for(int i=worker.size()-1;i>=0;i--){
            while(index>=0 && nums[index].second>worker[i]) index--;
            if(index==-1) continue;
            ans+=nums[index].first;
        }
        return ans;        
    }
};
