class Solution {
public:
    int longestMountain(vector<int>& arr) {
        int n = arr.size();
        vector<int> dp(n, 1), dp2(n, 1);
        int ans = 0;
        for (int ind=1; ind<n; ind++) {
            if (arr[ind] > arr[ind-1]) {
                dp[ind] = 1 + dp[ind-1];
            }
        }
        for (int ind=n-2; ind>=0; ind--) {
            if (arr[ind] > arr[ind+1]) {
                dp2[ind] = 1 + dp2[ind+1];
            }
        }
        for (int i=0; i<n; i++) {
            if (dp[i] > 1 && dp2[i] > 1) {
                ans = max(dp[i] + dp2[i] - 1, ans);
            }
        }
        return ans;
    }
};
c2:

class Solution {
public:
    int longestMountain(vector<int>& arr) {
        int n = arr.size();
        // 1. IDENTIFY PEAKS
        // 2. TRAVERSE BACKWARDS WHILE PREVIOUS ELEMENT -
        // - IS SMALLER THAT CURRENT (i.e. GO TO THE START ROOT OF THE MOUNTAIN)
        // 3. TRAVERSE FORWARD WHILE NEXT ELEMENT IS SMALLER THAN CURRENT 
        // (i.e. GO TO THE END ROOT OF THE MOUNTAIN)
        // 4 . ADD THEM TO CALCULATE THE MOUNTAIN LENGTH
        int max_length = 0;
        for(int i=1;i<n-1;i++)
        {
            if((arr[i] > arr[i-1]) && (arr[i] > arr[i+1])) //PEAK CONDITION
            {
                int start_root = i;
                int end_root = i;
                while( start_root>0 && arr[start_root] > arr[start_root-1])
                {
                    start_root--; //getting start root
                    
                }
                while( end_root<n-1 && arr[end_root] > arr[end_root+1] )
                {
                    end_root++; //getting end root
                }
                max_length = max(max_length,(end_root-start_root+1));
                i = end_root;
            }
        }
        return max_length;
    }
};
40
40

