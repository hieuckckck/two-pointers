[C++] Brute - Better - Optimal
suren-yeager
47
Mar 15, 2023
Brute Force (TLE):
Code
class Solution {
public:
    int maxDistance(vector<int>& nums1, vector<int>& nums2){
        int n1=size(nums1),n2=size(nums2),res=0;
        for(int i=0;i<n1;i++){
            for(int j=i;j<n2;j++) {
                if(nums1[i]<=nums2[j]) res=max(best,j-i);
            }
        }
        return res;
    }
};
Complexity
Time complexity: O(n∗m)O(n*m)O(n∗m)
Space complexity: O(1)O(1)O(1)
Better :
Code
class Solution {
public:
    int maxDistance(vector<int>& nums1, vector<int>& nums2){
        int n1=size(nums1),n2=size(nums2),res=0; 
        for(int i=0;i<n1;i++){
            int val=nums1[i];
            int l=i,r=n2-1;
            while(l<=r){
                int mid=l+(r-l)/2;
                if(nums2[mid]>=val){
                    res=max(res,mid-i);
                    l=mid+1;
                }
                else r=mid-1;
            }
        }
        return res;
    }
};
Complexity
Time complexity: O(n∗log(m))O(n*log(m))O(n∗log(m))
Space complexity: O(1)O(1)O(1)
Optimal :
Code
class Solution {
public:
    int maxDistance(vector<int>& nums1, vector<int>& nums2){
        int n1=size(nums1),n2=size(nums2),res=0;
        for(int i=0,j=0;i<n1&&j<n2;){
            if(nums1[i]<=nums2[j]) res=max(res,(j++)-i);
            else i++;
        }
        return res;
    }
};
Complexity
Time complexity: O(n+m)O(n+m)O(n+m)
Space complexity: O(1)O(1)O(1)

c2:

class Solution {
public:
    int maxDistance(vector<int>& nums1, vector<int>& nums2) {
        int n1 = nums1.size(),n2 = nums2.size(),ans = 0;
        int i = n1-1,j = n2-1;
        while(j>=0 && nums2[j]<nums1[i]){
            j--;
        }
        // cout<<1;
        while(j>=0){
            while(i>=0 && nums1[i]<=nums2[j]){
                i--;
            }
            ans = max(j-i-1,ans);
            j--;
        }
        return ans;
    }
};
